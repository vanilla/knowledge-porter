<?php

namespace Vanilla\KnowledgePorter\Tests;

use Vanilla\KnowledgePorter\HttpClients\VanillaClient;
use Vanilla\KnowledgePorter\Sources\PhpdocHtmlSource;
use Vanilla\KnowledgePorter\Tests\Stubs\TestDestination;
use Vanilla\KnowledgePorter\Tests\Stubs\TestLogger;

class PhpdocHtmlSourceTest extends ClassTestCase
{
    /**
     * @var PhpdocHtmlSource
     */
    private $source;

    /**
     * @var string
     */
    private $path;

    /**
     * Call a protected or private method on the Source object
     *
     * @param string $methodName
     * @param array $params
     * @return mixed|null
     */
    public function sourceInvokeMethod(string $methodName, array $params = [])
    {
        return parent::invokeMethod($this->source, $methodName, $params);
    }

    /**
     * Get the value of a protected or private property on the Source object
     * @param string $propertyName
     * @return mixed|null
     */
    public function sourceGetProtectedPrivateProperty(string $propertyName)
    {
        return parent::getProtectedPrivateProperty($this->source, $propertyName);
    }

    /**
     * Set the value of a protected or private property on the Source object
     *
     * @param string $propertyName
     * @param string $value
     */
    public function sourceSetProtectedPrivateProperty(string $propertyName, $value): void
    {
        parent::setProtectedPrivateProperty($this->source, $propertyName, $value);
    }

    /**
     * Initialize the Source object with some stub classes and setup some configs
     */
    protected function setUp(): void
    {
        $client = new VanillaClient();
        $this->source = new PhpdocHtmlSource($client);

        $s = DIRECTORY_SEPARATOR;
        $this->path = dirname(__FILE__) . "{$s}mocks{$s}phpdochtmlsource{$s}tmp";

        $config = [
            'foreignID' => 'phpdoc',
            'path' => $this->path,
            'sourceLocale' => 'en',
            'importSettings' => [
                'format' => 'wysiwyg',
                'viewType' => 'guide',
                'sortArticles' => 'manual'
            ],
            'name' => 'Vanilla Class Documentation',
            'description' => 'Autogenerated documentation direct from the source code.',
            'urlCode' => 'docs'
        ];

        $this->sourceInvokeMethod('setConfig', [$config]);

        $logger = new TestLogger();
        $this->sourceInvokeMethod('setLogger', [$logger]);

        $this->source->setDestination(new TestDestination());
    }

    public function testCreateNoNamespaceCategory(): void
    {
        $this->sourceInvokeMethod('loadConfigs');

        $expected = [
            'foreignID' => 'phpdoc-root.\\',
            'knowledgeBaseID' => '$foreignID:phpdoc',
            'parentID' => '$foreignID:phpdoc-root',
            'name' => '[no namespace]',
            'sourceParentID' => '$foreignID:phpdoc-root',
            'rootCategory' => 'false',
        ];

        $actual = $this->sourceInvokeMethod('createNoNamespaceCategory');
        $this->assertSame($expected, $actual);
    }

    public function testFilterCategories(): void
    {
        $testCategories = ['test 1', 'test 2', null, null, 'test 3', null, 'test 4', null, null, 'test 5', ['test 6', null, 'test 7'], null, 'test 8'];
        $expectedCategories = ['test 1', 'test 2', 'test 3', 'test 4', 'test 5', ['test 6', 'test 7'], 'test 8'];
        $actualCategories = $this->sourceInvokeMethod('filterCategories', [$testCategories]);

        $this->assertSame($expectedCategories, $actualCategories);
    }

    public function testGetFileRehostingHeaders(): void
    {
        $this->assertSame([], $this->source->getFileRehostingHeaders());
    }

    public function testGetKnowledgeBaseConfig(): void
    {
        $this->sourceInvokeMethod('loadConfigs');
        $actual = $this->sourceInvokeMethod('getKnowledgeBaseConfig');

        $expected = [
            [
                'foreignID' => 'phpdoc',
                'name' => 'Vanilla Class Documentation',
                'description' => 'Autogenerated documentation direct from the source code.',
                'urlCode' => 'docs',
                'sourceLocale' => 'en',
                'viewType' => 'guide',
                'sortArticles' => 'manual',
                'generateRootCategoryForeignID' => 'true',
            ]
        ];

        $this->assertArrayHasKey(0, $actual);
        $this->assertArrayHasKey('foreignID', $actual[0]);

        unset($actual[0]['dateUpdated']);
        $this->assertSame($expected, $actual);
    }

    public function testGetMassagedFiles(): void
    {
        $this->sourceInvokeMethod('loadConfigs');
        $actual = $this->sourceInvokeMethod('getMassagedFiles');

        $expected = [
            '.',
            '..',
            'FirstOrphanClass.html',
            'Gdn.GardenClass.html',
            'Namespace.Child.ChildClass.html',
            'Namespace.Child.ChildClassTwo.html',
            'Namespace.Class.html',
            'Namespace.SecondClass.html',
            'SecondOrphanClass.html',
        ];

        $this->assertSame($expected, $actual);

        $class_path = $this->path . DIRECTORY_SEPARATOR . 'classes' . DIRECTORY_SEPARATOR;
        $dot = $class_path . 'Gdn.GardenClass.html';
        $underscore = $class_path . 'Gdn_GardenClass.html';
        rename($dot, $underscore);

        $this->assertFalse(file_exists($dot));
        $this->assertTrue(file_exists($underscore));
    }

    public function testLoadConfigs(): void
    {
        $this->sourceInvokeMethod('loadConfigs');

        $this->assertSame('phpdoc', $this->sourceGetProtectedPrivateProperty('foreignID'));
        $this->assertSame($this->path, $this->sourceGetProtectedPrivateProperty('sourcePath'));
        $this->assertSame('en', $this->sourceGetProtectedPrivateProperty('locale'));
        $this->assertSame('wysiwyg', $this->sourceGetProtectedPrivateProperty('format'));
        $this->assertSame('guide', $this->sourceGetProtectedPrivateProperty('viewType'));
        $this->assertSame('manual', $this->sourceGetProtectedPrivateProperty('sortArticles'));
        $this->assertSame('phpdoc-root.\\', $this->sourceGetProtectedPrivateProperty('noNamespaceID'));
    }

    public function testProcessKnowledgeArticles(): void
    {
        $this->sourceInvokeMethod('loadConfigs');
        $this->assertNull($this->sourceInvokeMethod('processKnowledgeArticles'));
    }

    public function testProcessKnowledgeBase(): void
    {
        $this->assertNull($this->sourceInvokeMethod('processKnowledgeBase'));
    }

    public function testProcessKnowledgeCategories(): void
    {
        $this->sourceInvokeMethod('loadConfigs');
        $this->assertNull($this->sourceInvokeMethod('processKnowledgeCategories'));
    }

}
